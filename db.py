import sqlite3
import os
import json
from datetime import datetime

# Database file name
DB_FILE = "bot_data.sqlite"

# Connect to SQLite database (create if not exists)
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cur = conn.cursor()

# Create tables if they do not exist
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    first_name TEXT,
    last_name TEXT,
    username TEXT,
    group_name TEXT,
    subgroup INTEGER,
    notify INTEGER DEFAULT 0,
    reminders INTEGER DEFAULT 0
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    name TEXT,
    group_name TEXT,
    details TEXT,
    status TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    question TEXT,
    asked_at TEXT DEFAULT CURRENT_TIMESTAMP,
    answered INTEGER DEFAULT 0,
    answer TEXT,
    answered_at TEXT
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS news (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    content TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS faq (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question TEXT,
    answer TEXT
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS resources (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    url TEXT
);
""")
conn.commit()

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
cur.execute("SELECT COUNT(*) FROM users")
users_count = cur.fetchone()[0]
cur.execute("SELECT COUNT(*) FROM requests")
requests_count = cur.fetchone()[0]
cur.execute("SELECT COUNT(*) FROM questions")
questions_count = cur.fetchone()[0]
cur.execute("SELECT COUNT(*) FROM news")
news_count = cur.fetchone()[0]
cur.execute("SELECT COUNT(*) FROM faq")
faq_count = cur.fetchone()[0]
cur.execute("SELECT COUNT(*) FROM resources")
res_count = cur.fetchone()[0]
if users_count == 0 and requests_count == 0 and questions_count == 0 and news_count == 0 and faq_count == 0 and res_count == 0:
    # –î–æ–±–∞–≤–ª—è–µ–º 5 –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å —Ä–∞–∑–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏)
    sample_users = [
        (1, "–ò–≤–∞–Ω", "–ò–≤–∞–Ω–æ–≤", "ivanov", "–ü–ò-21", 1, 0, 0),
        (2, "–ü–µ—Ç—Ä", "–ü–µ—Ç—Ä–æ–≤", "petrov", "–ü–ò-22", 2, 0, 0),
        (3, "–ù–∏–∫–æ–ª–∞–π", "–ù–∏–∫–æ–ª–∞–µ–≤", "nick", "–ò–ö-19", 1, 0, 0),
        (4, "–°–µ—Ä–≥–µ–π", "–°–µ—Ä–≥–µ–µ–≤", "sergey", "–ë–ò-20", 2, 0, 0),
        (5, "–ê–ª–µ–∫—Å–µ–π", "–ê–ª–µ–∫—Å–µ–µ–≤", "alex", "–§–ò-18", 1, 0, 0)
    ]
    for user in sample_users:
        cur.execute("INSERT OR IGNORE INTO users (user_id, first_name, last_name, username, group_name, subgroup, notify, reminders) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", user)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 3 –∑–∞—è–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (spravka, otsrochka, hvost)
    sample_requests = [
        # spravka
        (1, "spravka", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "–ü–ò-21", "–¥–ª—è —Å—Ç–∏–ø–µ–Ω–¥–∏–∏", "–ü—Ä–∏–Ω—è—Ç–∞"),
        (2, "spravka", "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "–ü–ò-22", "–¥–ª—è –≤–æ–µ–Ω–∫–æ–º–∞—Ç–∞", "–ü—Ä–∏–Ω—è—Ç–∞"),
        (3, "spravka", "–ù–∏–∫–æ–ª–∞–π –ù–∏–∫–æ–ª–∞–µ–≤", "–ò–ö-19", "–¥–ª—è –æ–±—â–µ–∂–∏—Ç–∏—è", "–ü—Ä–∏–Ω—è—Ç–∞"),
        # otsrochka
        (2, "otsrochka", "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "–ü–ò-22", "–±–æ–ª–µ–∑–Ω—å", "–ü—Ä–∏–Ω—è—Ç–∞"),
        (4, "otsrochka", "–°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤", "–ë–ò-20", "—Å–µ–º–µ–π–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞", "–ü—Ä–∏–Ω—è—Ç–∞"),
        (5, "otsrochka", "–ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–µ–µ–≤", "–§–ò-18", "—É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", "–ü—Ä–∏–Ω—è—Ç–∞"),
        # hvost (–ø–µ—Ä–µ—Å–¥–∞—á–∞)
        (1, "hvost", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "–ü–ò-21", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ü—Ä–∏–Ω—è—Ç–∞"),
        (3, "hvost", "–ù–∏–∫–æ–ª–∞–π –ù–∏–∫–æ–ª–∞–µ–≤", "–ò–ö-19", "–ò—Å—Ç–æ—Ä–∏—è", "–ü—Ä–∏–Ω—è—Ç–∞"),
        (5, "hvost", "–ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–µ–µ–≤", "–§–ò-18", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ü—Ä–∏–Ω—è—Ç–∞")
    ]
    for req in sample_requests:
        cur.execute("INSERT INTO requests (user_id, type, name, group_name, details, status) VALUES (?, ?, ?, ?, ?, ?)", req)
    # –î–æ–±–∞–≤–ª—è–µ–º 3 –ø—Ä–∏–º–µ—Ä–∞ FAQ (–≤–æ–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç)
    sample_faq = [
        ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–ø—Ä–∞–≤–∫—É?", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /spravka –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."),
        ("–ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö?", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /reminders –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."),
        ("–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —è –ø—Ä–æ–ø—É—Å—Ç–∏–ª —ç–∫–∑–∞–º–µ–Ω –ø–æ –±–æ–ª–µ–∑–Ω–∏?", "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ—Å–¥–∞—á—É —ç–∫–∑–∞–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /hvost.")
    ]
    for q, a in sample_faq:
        cur.execute("INSERT INTO faq (question, answer) VALUES (?, ?)", (q, a))
    # –î–æ–±–∞–≤–ª—è–µ–º 3 —Ä–µ—Å—É—Ä—Å–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ + URL)
    sample_resources = [
        ("üìö –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", "https://library.mgppu.ru"),
        ("üåê –°–∞–π—Ç –ú–ì–ü–ü–£", "https://mgppu.ru"),
        ("üéì –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞", "https://lk.mgppu.ru")
    ]
    for name, url in sample_resources:
        cur.execute("INSERT INTO resources (name, url) VALUES (?, ?)", (name, url))
    # –î–æ–±–∞–≤–ª—è–µ–º 3 –Ω–æ–≤–æ—Å—Ç–∏/–æ–±—ä—è–≤–ª–µ–Ω–∏—è
    sample_news = [
        "–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ 10 –∏—é–Ω—è.",
        "–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏—é –æ—Ç–∫—Ä—ã—Ç.",
        "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π."
    ]
    for content in sample_news:
        cur.execute("INSERT INTO news (content) VALUES (?)", (content,))
    # –î–æ–±–∞–≤–ª—è–µ–º 3 –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö —Å—Ä–∞–∑—É —Å –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    sample_questions = [
        (1, "–ö–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è?"),
        (2, "–ì–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π?"),
        (3, "–ö–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –æ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã?")
    ]
    answered_qid = None
    for user_id, question_text in sample_questions:
        cur.execute("INSERT INTO questions (user_id, question) VALUES (?, ?)", (user_id, question_text))
        if answered_qid is None:
            answered_qid = cur.lastrowid
    # –û—Ç–º–µ—á–∞–µ–º –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å (–ø–µ—Ä–≤—ã–π) –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if answered_qid:
        cur.execute("UPDATE questions SET answered=1, answer=?, answered_at=? WHERE id=?", 
                    ("–≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ.", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), answered_qid))
    conn.commit()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞—è–≤–∫–∏, –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ–≤–æ—Å—Ç–∏, FAQ, —Ä–µ—Å—É—Ä—Å—ã)
def ensure_user(user):
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ (–µ—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ)."""
    uid = user.id
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    username = user.username or ""
    # Insert user if not exists
    cur.execute("INSERT OR IGNORE INTO users (user_id, first_name, last_name, username, notify, reminders) VALUES (?, ?, ?, ?, 0, 0)",
                (uid, first_name, last_name, username))
    # Update name/username on each call (in case they changed)
    cur.execute("UPDATE users SET first_name=?, last_name=?, username=? WHERE user_id=?",
                (first_name, last_name, username, uid))
    conn.commit()

def update_user_group(user_id, group_name):
    """–û–±–Ω–æ–≤–∏—Ç—å —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É (None)."""
    cur.execute("UPDATE users SET group_name=?, subgroup=NULL WHERE user_id=?", (group_name, user_id))
    conn.commit()

def update_user_subgroup(user_id, subgroup):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cur.execute("UPDATE users SET subgroup=? WHERE user_id=?", (subgroup, user_id))
    conn.commit()

def toggle_notify(user_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (1 –∏–ª–∏ 0)."""
    cur.execute("SELECT notify FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    new_state = 1
    if row:
        current = row[0] or 0
        new_state = 0 if current == 1 else 1
    cur.execute("UPDATE users SET notify=? WHERE user_id=?", (new_state, user_id))
    conn.commit()
    return new_state

def toggle_reminders(user_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–ª–∞–≥ —É—á–µ–±–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (1 –∏–ª–∏ 0)."""
    cur.execute("SELECT reminders FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    new_state = 1
    if row:
        current = row[0] or 0
        new_state = 0 if current == 1 else 1
    cur.execute("UPDATE users SET reminders=? WHERE user_id=?", (new_state, user_id))
    conn.commit()
    return new_state

def get_user_group_sub(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –∏ –ø–æ–¥–≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple)."""
    cur.execute("SELECT group_name, subgroup FROM users WHERE user_id=?", (user_id,))
    return cur.fetchone()

def get_user_profile(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≥—Ä—É–ø–ø–∞, –ø–æ–¥–≥—Ä—É–ø–ø–∞, notify, reminders."""
    cur.execute("SELECT group_name, subgroup, notify, reminders FROM users WHERE user_id=?", (user_id,))
    return cur.fetchone()

def add_question(user_id, text):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π) –≤ –±–∞–∑–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≤–æ–ø—Ä–æ—Å–∞."""
    cur.execute("INSERT INTO questions (user_id, question) VALUES (?, ?)", (user_id, text))
    conn.commit()
    return cur.lastrowid

def get_unanswered_questions():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (—Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)."""
    cur.execute(
        "SELECT q.id, u.first_name, q.question, datetime(q.asked_at, 'localtime') "
        "FROM questions q LEFT JOIN users u ON q.user_id = u.user_id "
        "WHERE q.answered = 0"
    )
    return cur.fetchall()

def answer_question(qid, answer_text):
    """–û—Ç–º–µ—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (user_id, question) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    cur.execute("SELECT user_id, question FROM questions WHERE id=? AND answered=0", (qid,))
    row = cur.fetchone()
    if not row:
        return None
    user_id, question_text = row
    cur.execute("UPDATE questions SET answered=1, answer=?, answered_at=datetime('now') WHERE id=?", (answer_text, qid))
    conn.commit()
    return (user_id, question_text)

def get_all_faq():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ FAQ —Å–ø–∏—Å–∫–æ–º (question, answer)."""
    cur.execute("SELECT question, answer FROM faq")
    return cur.fetchall()

def add_faq(question_text, answer_text):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ FAQ."""
    cur.execute("INSERT INTO faq (question, answer) VALUES (?, ?)", (question_text, answer_text))
    conn.commit()

def delete_faq(faq_id):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å FAQ –ø–æ ID. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ."""
    cur.execute("DELETE FROM faq WHERE id=?", (faq_id,))
    deleted = cur.rowcount
    conn.commit()
    return deleted > 0

def get_all_resources():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã (—Å–ø–∏—Å–æ–∫ tuple (name, url))."""
    cur.execute("SELECT name, url FROM resources")
    return cur.fetchall()

def add_resource(name, url):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å (—Å—Å—ã–ª–∫—É)."""
    cur.execute("INSERT INTO resources (name, url) VALUES (?, ?)", (name, url))
    conn.commit()

def delete_resource(res_id):
    """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å –ø–æ ID. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–¥–∞–ª—ë–Ω —Ä–µ—Å—É—Ä—Å."""
    cur.execute("DELETE FROM resources WHERE id=?", (res_id,))
    deleted = cur.rowcount
    conn.commit()
    return deleted > 0

def insert_request(user_id, req_type, name, group_name, details, status="–ü—Ä–∏–Ω—è—Ç–∞"):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É (spravka, otsrochka, hvost) –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    cur.execute("INSERT INTO requests (user_id, type, name, group_name, details, status) VALUES (?, ?, ?, ?, ?, ?)",
                (user_id, req_type, name, group_name, details, status))
    conn.commit()
    return cur.lastrowid

def get_requests_by_user(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ tuple (type, details, status)."""
    cur.execute("SELECT type, details, status FROM requests WHERE user_id=?", (user_id,))
    return cur.fetchall()

def get_all_news():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏/–æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º (content, created_at)."""
    cur.execute("SELECT content, created_at FROM news ORDER BY created_at DESC")
    return cur.fetchall()

def add_news(content):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å/–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    cur.execute("INSERT INTO news (content) VALUES (?)", (content,))
    conn.commit()

def get_all_user_ids():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    cur.execute("SELECT user_id FROM users")
    result = cur.fetchall()
    return [row[0] for row in result]

def get_users_for_notify():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ (user_id, group_name, subgroup) –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å notify=1 (–≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)."""
    cur.execute("SELECT user_id, group_name, subgroup FROM users WHERE notify=1 AND group_name IS NOT NULL")
    return cur.fetchall()

def get_users_for_reminders():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ user_id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å reminders=1 (–≤–∫–ª—é—á–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)."""
    cur.execute("SELECT user_id FROM users WHERE reminders=1")
    result = cur.fetchall()
    return [row[0] for row in result]

def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ users, requests_total, spravka, otsrochka, hvost, questions_total, questions_unanswered, news, faq, resources)."""
    stats = {}
    # Count users
    cur.execute("SELECT COUNT(*) FROM users")
    stats["users"] = cur.fetchone()[0] or 0
    # Count requests total and by type
    cur.execute("SELECT COUNT(*) FROM requests")
    stats["requests_total"] = cur.fetchone()[0] or 0
    cur.execute("SELECT type, COUNT(*) FROM requests GROUP BY type")
    type_counts = {t: c for t, c in cur.fetchall()}
    stats["spravka"] = type_counts.get("spravka", 0)
    stats["otsrochka"] = type_counts.get("otsrochka", 0)
    stats["hvost"] = type_counts.get("hvost", 0)
    # Questions total and unanswered
    cur.execute("SELECT COUNT(*), SUM(CASE WHEN answered=0 THEN 1 ELSE 0 END) FROM questions")
    q_total, q_unanswered = cur.fetchone()
    stats["questions_total"] = q_total or 0
    stats["questions_unanswered"] = q_unanswered or 0
    # News count
    cur.execute("SELECT COUNT(*) FROM news")
    stats["news"] = cur.fetchone()[0] or 0
    # FAQ count
    cur.execute("SELECT COUNT(*) FROM faq")
    stats["faq"] = cur.fetchone()[0] or 0
    # Resources count
    cur.execute("SELECT COUNT(*) FROM resources")
    stats["resources"] = cur.fetchone()[0] or 0
    return stats
def delete_news(news_id: int) -> bool:
    """
    –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID. 
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –∏–Ω–∞—á–µ False.
    """
    cur.execute("DELETE FROM news WHERE id = ?", (news_id,))
    deleted = cur.rowcount
    conn.commit()
    return deleted > 0
